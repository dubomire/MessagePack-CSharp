<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new[]
    {
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(bool), 
        typeof(byte), 
        typeof(sbyte),
        typeof(char),
        typeof(DateTime)
    };
#>
using System;
using MessagePack.Internal;

namespace MessagePack.Formatters
{
<# foreach(var t in types) {  #>
    public sealed class <#= t.Name #>Formatter : IMessagePackFormatter<<#= t.Name #>>
    {
        public static readonly <#= t.Name #>Formatter Instance = new <#= t.Name #>Formatter();

        <#= t.Name #>Formatter()
        {
        }

        public int Serialize(TargetBuffer target, <#= t.Name #> value, IFormatterResolver formatterResolver)
        {
            return MessagePackBinary.Write<#= t.Name #>(target, value);
        }

        public <#= t.Name #> Deserialize(byte[] bytes, int offset, IFormatterResolver formatterResolver, out int readSize)
        {
            return MessagePackBinary.Read<#= t.Name #>(bytes, offset, out readSize);
        }
    }

    public sealed class Nullable<#= t.Name #>Formatter : IMessagePackFormatter<<#= t.Name #>?>
    {
        public static readonly Nullable<#= t.Name #>Formatter Instance = new Nullable<#= t.Name #>Formatter();

        Nullable<#= t.Name #>Formatter()
        {
        }

        public int Serialize(TargetBuffer target, <#= t.Name #>? value, IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return MessagePackBinary.WriteNil(target);
            }
            else
            {
                return MessagePackBinary.Write<#= t.Name #>(target, value.Value);
            }
        }

        public <#= t.Name #>? Deserialize(byte[] bytes, int offset, IFormatterResolver formatterResolver, out int readSize)
        {
            if (MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }
            else
            {
                return MessagePackBinary.Read<#= t.Name #>(bytes, offset, out readSize);
            }
        }
    }

<# if(t.Name != "Byte") { #>
    public sealed class <#= t.Name #>ArrayFormatter : IMessagePackFormatter<<#= t.Name #>[]>
    {
        public static readonly <#= t.Name #>ArrayFormatter Instance = new <#= t.Name #>ArrayFormatter();

        <#= t.Name #>ArrayFormatter()
        {

        }

        public int Serialize(TargetBuffer target, <#= t.Name #>[] value, IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return MessagePackBinary.WriteNil(target);
            }
            else
            {
                MessagePackBinary.WriteArrayHeader(target, value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    MessagePackBinary.Write<#= t.Name #>(target, value[i]);
                }

                return 0;
            }
        }

        public <#= t.Name #>[] Deserialize(byte[] bytes, int offset, IFormatterResolver formatterResolver, out int readSize)
        {
            if (MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }
            else
            {
                var startOffset = offset;

                var len = MessagePackBinary.ReadArrayHeader(bytes, offset, out readSize);
                offset += readSize;
                var array = new <#= t.Name #>[len];
                for (int i = 0; i < array.Length; i++)
                {
                    array[i] = MessagePackBinary.Read<#= t.Name #>(bytes, offset, out readSize);
                    offset += readSize;
                }
                readSize = offset - startOffset;
                return array;
            }
        }
    }
<# } #>

<# } #>
}